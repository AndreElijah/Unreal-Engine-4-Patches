diff -ruN Engine/Source/Runtime/Engine/Classes/GameFramework/Actor.h EngineStage/Source/Runtime/Engine/Classes/GameFramework/Actor.h
--- Engine/Source/Runtime/Engine/Classes/GameFramework/Actor.h	2019-11-30 20:07:49.877896600 +0300
+++ EngineStage/Source/Runtime/Engine/Classes/GameFramework/Actor.h	2019-11-30 18:20:58.933368300 +0300
@@ -209,6 +209,9 @@
 	UPROPERTY(EditAnywhere, Category=Collision, AdvancedDisplay)
 	uint8 bRelevantForLevelBounds:1;
 
+	UPROPERTY(EditAnywhere, Category = Collision, AdvancedDisplay, Meta = (UIMin = "0", ClampMin = "0"))
+	uint32 CollisionLayer;
+
 	/**
 	 * If true, this actor will only be destroyed during scrubbing if the replay is set to a time before the actor existed.
 	 * Otherwise, RewindForReplay will be called if we detect the actor needs to be reset.
diff -ruN Engine/Source/Runtime/Engine/Private/Collision/Collision.cpp EngineStage/Source/Runtime/Engine/Private/Collision/Collision.cpp
--- Engine/Source/Runtime/Engine/Private/Collision/Collision.cpp	2019-11-30 20:07:49.878896800 +0300
+++ EngineStage/Source/Runtime/Engine/Private/Collision/Collision.cpp	2019-11-30 18:33:48.068446700 +0300
@@ -178,6 +178,8 @@
 	{
 		OwnerTag = InIgnoreActor->GetFName();
 	}
+
+	Layer = 0;
 }
 
 
@@ -308,6 +310,11 @@
 	}
 }
 
+void FCollisionQueryParams::SetLayer(const uint32 NewLayer)
+{
+	Layer = NewLayer;
+}
+
 const FCollisionQueryParams::IgnoreComponentsArrayType& FCollisionQueryParams::GetIgnoredComponents() const
 {
 	if (!bComponentListUnique)
diff -ruN Engine/Source/Runtime/Engine/Private/Components/PrimitiveComponent.cpp EngineStage/Source/Runtime/Engine/Private/Components/PrimitiveComponent.cpp
--- Engine/Source/Runtime/Engine/Private/Components/PrimitiveComponent.cpp	2019-11-30 20:07:49.880897900 +0300
+++ EngineStage/Source/Runtime/Engine/Private/Components/PrimitiveComponent.cpp	2019-11-30 18:21:29.180486200 +0300
@@ -1904,6 +1904,7 @@
 	OutResponseParam.CollisionResponse = BodyInstance.GetResponseToChannels();
 	OutParams.AddIgnoredActors(MoveIgnoreActors);
 	OutParams.AddIgnoredComponents(MoveIgnoreComponents);
+	OutParams.SetLayer(GetOwner()->CollisionLayer);
 	OutParams.bTraceComplex = bTraceComplexOnMove;
 	OutParams.bReturnPhysicalMaterial = bReturnMaterialOnMove;
 	OutParams.IgnoreMask = GetMoveIgnoreMask();
diff -ruN Engine/Source/Runtime/Engine/Private/PhysicsEngine/CollisionQueryFilterCallback.cpp EngineStage/Source/Runtime/Engine/Private/PhysicsEngine/CollisionQueryFilterCallback.cpp
--- Engine/Source/Runtime/Engine/Private/PhysicsEngine/CollisionQueryFilterCallback.cpp	2019-11-30 20:07:49.881897100 +0300
+++ EngineStage/Source/Runtime/Engine/Private/PhysicsEngine/CollisionQueryFilterCallback.cpp	2019-11-30 19:08:16.927525200 +0300
@@ -152,6 +152,14 @@
 		return (PreFilterReturnValue = ECollisionQueryHitType::None);
 	}
 
+	if (BodyInstance)
+	{
+		if (BodyInstance->OwnerComponent->GetOwner()->CollisionLayer != Layer)
+		{
+			return (PreFilterReturnValue = ECollisionQueryHitType::None);
+		}
+	}
+
 	ECollisionQueryHitType Result = FCollisionQueryFilterCallback::CalcQueryHitType(FilterData, ShapeFilter, true);
 
 	if (Result == ECollisionQueryHitType::Touch && bIgnoreTouches)
diff -ruN Engine/Source/Runtime/Engine/Private/PhysicsEngine/CollisionQueryFilterCallback.h EngineStage/Source/Runtime/Engine/Private/PhysicsEngine/CollisionQueryFilterCallback.h
--- Engine/Source/Runtime/Engine/Private/PhysicsEngine/CollisionQueryFilterCallback.h	2019-11-30 20:07:49.882897000 +0300
+++ EngineStage/Source/Runtime/Engine/Private/PhysicsEngine/CollisionQueryFilterCallback.h	2019-11-30 19:07:00.030944100 +0300
@@ -32,6 +32,8 @@
 	/** List of ActorIds for this query to ignore */
 	const FilterIgnoreActorsArrayType& IgnoreActors;
 
+	const uint32 Layer;
+
 	/** Whether we are doing an overlap query. This is needed to ensure physx results are never blocking (even if they are in terms of unreal)*/
 	bool bIsOverlapQuery;
 
@@ -44,6 +46,7 @@
 	FCollisionQueryFilterCallback(const FCollisionQueryParams& InQueryParams, bool bInIsSweep)
 		: IgnoreComponents(InQueryParams.GetIgnoredComponents())
 		, IgnoreActors(InQueryParams.GetIgnoredActors())
+		, Layer(InQueryParams.GetLayer())
 #if DETECT_SQ_HITCHES
 		, bRecordHitches(false)
 #endif
diff -ruN Engine/Source/Runtime/Engine/Public/CollisionQueryParams.h EngineStage/Source/Runtime/Engine/Public/CollisionQueryParams.h
--- Engine/Source/Runtime/Engine/Public/CollisionQueryParams.h	2019-11-30 20:07:49.882897000 +0300
+++ EngineStage/Source/Runtime/Engine/Public/CollisionQueryParams.h	2019-11-30 19:06:46.975586500 +0300
@@ -94,6 +94,8 @@
 	/** Set of actors to ignore during the trace */
 	IgnoreActorsArrayType IgnoreActors;
 
+	uint32 Layer;
+
 	void Internal_AddIgnoredComponent(const UPrimitiveComponent* InIgnoreComponent);
 
 public:
@@ -199,6 +201,12 @@
 	 */
 	void AddIgnoredComponent_LikelyDuplicatedRoot(const UPrimitiveComponent* InIgnoreComponent);
 
+	void SetLayer(const uint32 NewLayer);
+	const uint32 GetLayer() const
+	{
+		return Layer;
+	}
+
 	FString ToString() const
 	{
 		return FString::Printf(TEXT("[%s:%s] TraceComplex(%d)"), *OwnerTag.ToString(), *TraceTag.ToString(), bTraceComplex );
